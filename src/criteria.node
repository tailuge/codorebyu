import { createRequire } from 'module';
const require = createRequire(import.meta.url);
require('dotenv').config();

const {
    GoogleGenerativeAI,
    HarmCategory, // Not strictly needed for this task, but good to have for future use
    HarmBlockThreshold, // Not strictly needed for this task, but good to have for future use
} = require("@google/generative-ai");


// Check for API key
if (!process.env.GEMINI_API_KEY) {
    console.error("Error: GEMINI_API_KEY environment variable not set.");
    process.exit(1);
}

const apiKey = process.env.GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({ model: "gemini-pro" }); // Use the standard "gemini-pro" model


// Define the criteria - including two that will FAIL
const criteriaList = [
    {
        title: "Age Range",
        detail: "Applicant must be between 25 and 45 years old.",
        field: "age",
    },
    {
        title: "Minimum Income",
        detail: "Applicant must have an annual income of at least $75,000.", // Increased to cause a FAIL
        field: "income",
    },
    {
        title: "Nationality",
        detail: "Applicant must be a citizen of either the United States or Canada.",
        field: "nationality",
    },
    {
        title: "Education",
        detail: "Applicant must have at least a Bachelor's degree.",
        field: "education",
    },
    {
        title: "Experience",
        detail: "Applicant must have a minimum of 8 years related work experience.", // Increased to cause a FAIL
        field: "experience",
    },
];

// Case information (Applicant Data)
const applicantCase = {
    name: "John Doe",
    age: 30,
    income: 60000,  // Will FAIL the income criteria
    nationality: "United States",
    education: "Master's Degree in Computer Science",
    experience: "5 years of software development experience" // Will FAIL the experience criteria
};

async function evaluateCriteria(criteria, applicantData) {

    const prompt = `
You are an evaluator assessing an applicant against specific criteria.

Criteria Title: ${criteria.title}
Criteria Detail: ${criteria.detail}

Applicant Information:
${Object.entries(applicantData).map(([key, value]) => `${key}: ${value}`).join('\n')}

Based on the provided criteria and applicant information, evaluate the applicant's status for this specific criterion.
Return ONLY one of the following: "PASS" or "FAIL". If there is not information to base a judgement on use "NA". Follow this with a colon (:) and then provide a ONE SENTENCE justification for your decision. Do not provide any additional explanation beyond one sentence.
`;

    const generationConfig = {
        temperature: 0.0, // Keep temperature low for consistency
        maxOutputTokens: 200, // Increased maxOutputTokens to accommodate the justification
    };

    const model = genAI.getGenerativeModel({ model: "gemini-pro", generationConfig });

    try {
        const result = await model.generateContent(prompt);
        const response = result.response;
        const text = response.text();

         // Basic validation of the response format
        if (!text.includes(":")) {
            throw new Error("Invalid response format: Missing colon separator.");
        }

        // Split the response into the decision and justification
        const [decision, ...justificationParts] = text.split(":");
        const justification = justificationParts.join(":").trim(); // Join in case there were extra colons

        // Further validation to check for valid decision.
        const trimmedDecision = decision.trim().toUpperCase(); // Normalize for comparison
        if (trimmedDecision !== "PASS" && trimmedDecision !== "FAIL" && trimmedDecision !== "NA") {
          throw new Error(`Invalid decision received: "${decision.trim()}".  Expected PASS, FAIL, or NA.`);
        }

        return { decision: trimmedDecision, justification };

    } catch (error) {
        console.error("Error during evaluation:", error);
         // Provide a fallback in case of an error, rather than crashing
        return { decision: "NA", justification: `Error during evaluation: ${error.message}` };
    }
}

async function generateReport(criteriaList, applicantCase) {
    const report = {};

    for (const criteria of criteriaList) {
        const { decision, justification } = await evaluateCriteria(criteria, applicantCase);
        report[criteria.field] = {
            title: criteria.title,
            detail: criteria.detail,
            evaluation: decision,
            justification: justification
        };
    }
    return report;
}

async function main() {
    try {
        const report = await generateReport(criteriaList, applicantCase);
        console.log(JSON.stringify(report, null, 2)); // Pretty print the JSON
    } catch (error) {
        console.error("An error occurred:", error);
    }
}

main();